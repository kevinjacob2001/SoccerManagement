{"version":3,"sources":["Components/Player/PlayerList.jsx","Components/Player/PlayerSingle.jsx","Components/Player/PlayerForm.jsx","Components/App.js","serviceWorker.js","index.js"],"names":["PlayerList","props","className","players","map","item","href","key","_id","onClick","updateCurrentPlayer","bind","firstName","lastName","PlayerSingle","alt","src","player","phone","email","strength","endurance","team","PlayerForm","e","preventDefault","axios","post","this","refs","value","then","res","console","log","catch","error","style","color","onSubmit","submitPlayer","id","ref","type","htmlFor","backgroundColor","name","Component","App","state","currentPlayer","get","Response","setState","data","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8fd3a771.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PlayerList = (props) => {\r\n    return ( \r\n        <div>\r\n        <ul className=\"collection with-header\">\r\n            <li className=\"collection-header\"><h4>Players List</h4></li>\r\n            {props.players.map((item) => (\r\n                <a href=\"#!\" className=\"collection-item\" key={item._id}\r\n                onClick={props.updateCurrentPlayer.bind(this,item)}>{item.firstName} {item.lastName}</a>\r\n            ))}\r\n        </ul>\r\n    \r\n    </div>\r\n    );\r\n}\r\n \r\nexport default PlayerList;\r\n","import React from 'react';\r\n\r\n\r\nconst PlayerSingle=(props)=>{\r\n    return(\r\n      <div className=\"container-fluid\">\r\n         <div className=\"row\">\r\n            <div className=\"col 12\">\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                <img alt=\"soccer image\" src=\"https://besthqwallpapers.com/Uploads/1-2-2018/39081/thumb2-lionel-messi-barcelona-la-liga-spain-corner-kick.jpg\"/>\r\n                <span className=\"card-title\">{props.player.firstName} {props.player.lastName}</span>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                        <div><p className=\"col 6\">Phone:{props.player.phone}</p>  <p className=\"col 6\"> Email:{props.player.email}</p></div>\r\n                        <div><p className=\"col 6\">Strength:{props.player.strength}</p>  <p className=\"col 6\"> Endurance(Out of 3):{props.player.endurance}</p></div>\r\n\r\n                </div>\r\n                <div className=\"card-action\">\r\n               Team:{props.player.team}\r\n                </div>\r\n             </div>\r\n            </div>\r\n        </div>\r\n    </div>       \r\n      \r\n    )\r\n}\r\n\r\nexport default PlayerSingle;","import React from 'react';\r\nimport { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass PlayerForm extends Component{\r\n        submitPlayer(e){\r\n            e.preventDefault();\r\n                axios.post(\"http://localhost:8000/players\",{\r\n                    firstName:this.refs.firstName.value,\r\n                    lastName:this.refs.lastName.value,\r\n                    team:this.refs.team.value,\r\n                    email:this.refs.email.value,\r\n                    phone:this.refs.phone.value,\r\n                  endurance:this.refs.endurance.value\r\n\r\n                }).then((res)=>{\r\n                    console.log(res)\r\n                }).catch((error)=>{\r\n                    console.log(error)\r\n                });\r\n\r\n        }\r\n\r\n    render(){\r\n        return(\r\n           \r\n  <div className=\"row\">\r\n      <h4 className=\"center\">Add a new player.</h4>\r\n            <form style={{color:\"black\"}} className=\"col s12\" onSubmit={this.submitPlayer.bind(this)}>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                        <input id=\"firstName\" ref=\"firstName\" type=\"text\"/>\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                    </div>\r\n                    <div className=\"input-field col s6\">\r\n                        <input id=\"lastName\" ref=\"lastName\" type=\"text\"/>\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                    </div>\r\n                    <div className=\"input-field col s6\">\r\n                        <input id=\"team\" ref=\"team\" type=\"text\"/>\r\n                        <label htmlFor=\"team\">Team Name</label>\r\n                    </div>\r\n                    <div className=\"input-field col s6\">\r\n                        <input id=\"email\" ref=\"email\" type=\"text\"/>\r\n                        <label htmlFor=\"email\">Email</label>\r\n                    </div>\r\n                \r\n                    <div className=\"input-field col s6\">\r\n                        <input id=\"phone\" ref=\"phone\" type=\"number\"/>\r\n                        <label htmlFor=\"phone\">Phone Number</label>\r\n                    </div>\r\n                    <div className=\"input-field col s6\">\r\n                        <input id=\"endurance\" ref=\"endurance\" type=\"number\"/>\r\n                        <label htmlFor=\"endurance\">Endurance(out of 3)</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"center\">\r\n                <button style={{backgroundColor:\"blue\"}} className=\" btn waves-effect waves-dark\" type=\"submit\" name=\"action\">\r\n                    Add Player\r\n                </button>\r\n                </div>\r\n            </form>\r\n</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayerForm;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport PlayerList from './Player/PlayerList';\nimport PlayerSingle from './Player/PlayerSingle';\nimport PlayerForm from './Player/PlayerForm';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      players: [],\n      currentPlayer: {},\n    }\nthis.updateCurrentPlayer=this.updateCurrentPlayer.bind(this);\n   \n  }\n\n  componentDidMount() {\n    const url = 'http://localhost:8000/players';\n\n    axios.get(url)\n      .then((Response) => {\n        this.setState({\n          players: Response.data\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  updateCurrentPlayer(item){\n    this.setState({\n      currentPlayer: item,\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n         \n          <nav>\n            <div className=\"nav-wrapper deep-purple darken-2 \">\n              <a href=\"/\" className=\"brand-logo\">Soccer Management</a>\n            </div>\n          </nav>\n        \n        </div>\n        <div className=\"row\">\n          <div className=\"col s3\"><PlayerList players={this.state.players}\n            updateCurrentPlayer={this.updateCurrentPlayer}/>\n          </div>\n          <div className=\"col s9\"><PlayerSingle player={this.state.currentPlayer}/></div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col s12\"><PlayerForm /></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}